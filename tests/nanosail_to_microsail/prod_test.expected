From Coq Require Import
     Strings.String
     ZArith.BinInt.

From Katamaran Require Import
     Semantics.Registers
     Program.

From stdpp Require Import
     finite.

From Equations Require Import
     Equations.

Import ctx.notations
       ctx.resolution.

Local Open Scope string_scope.
Local Open Scope list_scope.



(*** TYPES ***)

Import DefaultBase.



(*** PROGRAM ***)

Module Import ProdProgram <: Program DefaultBase.

  Section FunDeclKit.
    Inductive Fun : PCtx -> Ty -> Set :=
    | ex_prod : Fun [ "tt" ∷ ty.unit; "tt" ∷ ty.unit ]
                    (ty.prod
                       (ty.prod
                         (ty.prod ty.int ty.string)
                         (ty.prod ty.int ty.string))
                       (ty.prod ty.int ty.string))
    | switch  : Fun [ "p" ∷ (ty.prod ty.int ty.bool) ] (ty.prod ty.bool ty.int)
    .

    Definition 𝑭  : PCtx -> Ty -> Set := Fun.
    Definition 𝑭𝑿 : PCtx -> Ty -> Set := fun _ _ => Empty_set.
    Definition 𝑳  : PCtx -> Set := fun _ => Empty_set.
  End FunDeclKit.

  Include FunDeclMixin DefaultBase.

  Section FunDefKit.
    Definition fun_ex_prod : Stm [ "tt" ∷ ty.unit; "tt" ∷ ty.unit ]
                                 (ty.prod
                                   (ty.prod (ty.prod ty.int ty.string)
                                     (ty.prod ty.int ty.string))
                                   (ty.prod ty.int ty.string)) :=
      stm_exp
        (exp_val
          (ty.prod
            (ty.prod (ty.prod ty.int ty.string) (ty.prod ty.int ty.string))
            (ty.prod ty.int ty.string))
          (((1%Z, "one"), (2%Z, "two")), (1%Z, "one"))).

    Definition fun_switch : Stm [ "p" ∷ (ty.prod ty.int ty.bool) ]
                                (ty.prod ty.bool ty.int) :=
      stm_match_prod (stm_exp (exp_var "p")) "l" "r"
        (stm_exp (exp_binop bop.pair (exp_var "r") (exp_var "l"))).

    Definition FunDef {Δ τ} (f : Fun Δ τ) : Stm Δ τ :=
      match f in Fun Δ τ return Stm Δ τ with
      | ex_prod => fun_ex_prod
      | switch  => fun_switch
      end.
  End FunDefKit.

  Include DefaultRegStoreKit DefaultBase.

  Section ForeignKit.
    Definition Memory : Set := unit.
    Definition ForeignCall {σs σ} (f : 𝑭𝑿 σs σ) (args : NamedEnv Val σs)
      (res : string + Val σ) (γ γ' : RegStore) (μ μ' : Memory) : Prop := False.
    Lemma ForeignProgress {σs σ} (f : 𝑭𝑿 σs σ) (args : NamedEnv Val σs) γ μ :
      exists γ' μ' res, ForeignCall f args res γ γ' μ μ'.
    Proof. destruct f. Qed.
  End ForeignKit.

  Include ProgramMixin DefaultBase.

End ProdProgram.

